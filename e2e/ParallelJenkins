node("Protractor"){
  def suiteNameList = [];
  def envNameList;
  def dirSuffix = "ui_run_";
  properties([
	  parameters([
      text(
        defaultValue: 'case,cognitive=http://clm-pun-t3erts.bmc.com:8008\ntask,social,attachment=http://clm-pun-t3erts.bmc.com:8008\nknowledge,email=http://clm-pun-t3erts.bmc.com:8008\nslm,flowset,notification=http://clm-pun-t3erts.bmc.com:8008\nticketing=http://clm-pun-t3erts.bmc.com:8008',
        description: 'Execution Suite List',
        name: 'SuiteList',
      ),
      stringParam(
        defaultValue: 'Regression:UI:Auto:Upgrade',
        description: 'Jira test cycle',
        name: 'CycleName',
      ),
      stringParam(
        defaultValue: 'UI_Auto:Upgrade_Protractor',
        description: 'Jira test cycle folder',
        name: 'FolderName',
      ),
      booleanParam(
        defaultValue: false,
        description: 'Pass Percent',
        name: 'Stats'
      )
    ])
  ])

  stage('Parallel Automation Run'){
    bat """if exist "./e2e/reports" RMDIR /S /Q "./e2e/reports" """
    def runList = [:];
    def suite = SuiteList.split('\n');
    envNameList = SuiteList.split('\n').join("<br>");
    for (int i=0; i < suite.size(); i++){
      def suiteAndEnv = suite[i].split('=');
      def suiteName = suiteAndEnv[0];
      suiteNameList[i] = suiteName;
      def environment = suiteAndEnv[1];
      def dirName = dirSuffix + suiteName;
      bat """if not exist "${dirName}" mkdir "${dirName}" """
      runList["${suiteName}"] = {
        stage('build ' + suiteName) {
          dir(dirName){
            git branch: 'master',
            credentialsId: '807c8e4d-6d6c-47e1-a62e-ef2de91d6dce',
            url: 'https://github.bmc.com/DSM-Apps/bwf-e2e-protractor.git'
          }
          bat """if exist "./${dirName}/e2e/reports" RMDIR /S /Q "./${dirName}/e2e/reports" """
          //bat """npm --prefix ./${dirName}/ install ./${dirName}/"""
          //bat """npm --prefix ./${dirName}/ run webdriver-update"""
        }

        try {
          stage('run ' + suiteName) {
            // Run Automation
            //bat """protractor ./${dirName}/e2e/protractor.conf.js --reportpath ${dirName} --baseUrl ${environment} --suite ${suiteName}"""
            bat """npm --prefix ./${dirName}/ run e2e-protractor -- --baseUrl=${environment} --suite=${suiteName}"""
          }
        } catch (Exception e) {
          echo """Automation Failed ${suiteName}""" + e;
        }
      }
    }
    parallel runList
   }

  try {
    stage('Reports') {
      def now = new Date();
      def dateNow = now.format("yyyy-MM-dd HH:mm", TimeZone.getTimeZone('UTC'));
      for (int i=0; i < suiteNameList.size(); i++){
        def dirName = dirSuffix + suiteNameList[i];
        def reportZipFileName = "reports_" + suiteNameList[i] + ".zip";
        
        // Create Jira Cycle
        bat """npm --prefix ./${dirName}/ run jira-cycle ./${dirName}/ -- --cycle=%CycleName% --folder="%FolderName% ${dateNow}" --stats=%Stats%"""

        // Create Zip file
        zip archive: false, dir: """${dirName}/e2e/reports""", zipFile: """${dirName}/e2e/reports/${reportZipFileName}"""

        // copy report zip to parent report folder
        bat """xcopy /Y /F /I /Z /Q "${dirName}/e2e/reports/${reportZipFileName}" "./e2e/reports/*" """
      }

      // merge all Jira output csv files
      def jiraReportPath = "e2e/reports/spec-jira-report";
      def fileArray = [];
      def fileContent = readFile("./${dirSuffix + suiteNameList[0]}/${jiraReportPath}/jira-report.csv");
      for (int i=1; i < suiteNameList.size(); i++){
        def dirName = dirSuffix + suiteNameList[i];
        fileArray[i] = "/${dirName}/${jiraReportPath}/jira-report.csv";
        def fileLines = readFile("./${dirName}/${jiraReportPath}/jira-report.csv").readLines();
        fileContent = fileContent + "\n" + fileLines.tail().join('\n');
      }
      writeFile(file: "./${jiraReportPath}/jira-report.csv", text: fileContent);
      // copy latest cycle.html file to parent report folder
      bat """xcopy /Y /F /I /Z /Q "./${dirSuffix + suiteNameList[suiteNameList.size()-1]}/${jiraReportPath}/CycleReport.html" "./${jiraReportPath}/CycleReport.html*" """

      // zip jira report folder
      zip archive: false, dir: """${jiraReportPath}""", zipFile: """./e2e/reports/jira-report.zip"""

      // FTP parent report folder
      ftpPublisher alwaysPublishFromMaster: true, continueOnError: true, failOnError: false, publishers: [
        [configName: 'vl-pun-rem-qa4n-protractor', transfers: [
          [asciiMode: false, cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "UIAutoParallel_Build${env.BUILD_NUMBER}", remoteDirectorySDF: false, removePrefix: '', sourceFiles: """e2e/reports/*.zip"""]
        ], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]
      ]
    }
  } catch (Exception e) {
    echo """Jira Cycle, FTP Failed""" + e;
  }

  try {
    stage('Send Email'){
      emailext (
        subject: "BWF UI - Protractor Automation Parallel Run Report Build # ${env.BUILD_NUMBER}",
        body:
          """
          <style type="text/css">
            body {
              margin: 0px;
              padding: 15px;
              font-family: "Lucida Sans Unicode";
              font-size: 10pt;
            }
            h3 {
              background: #F2B66B;
              padding: 10px;
              border: 1px solid #333;
            }
            table {
              width: 70%;
            }
            td.bold {
              width: 30%;
              font-weight:bold;
            }
            table, tr, td {
              border: 1px solid black;
              border-collapse: collapse;
              padding: 5px;
            }
          </style>
          <h3>BWF UI - Protractor Automation Parallel Run Report</h3>
          <table>
            <tr><td class=bold>Environment Name: </td><td>${envNameList}</td></tr>
            <tr><td class=bold>Build URL:</td><td><a href="${env.BUILD_URL}">View Jenkins</a></td></tr>
            <tr><td class=bold>Build Artefact:</td><td><a href="ftp://vl-pun-rem-qa4n/punebuild/automation-results/protractor-result/UIAutoParallel_Build${env.BUILD_NUMBER}">FTP Link</a></td></tr>
          """
          +
          '${FILE, path="e2e/reports/spec-jira-report/CycleReport.html"}'
          +
          "</table>",
        //to: "prasad_vidhate@bmc.com;sunil_patil@bmc.com;pravin_ajagunde@bmc.com;tushar_garud@bmc.com;anant_sahitya@bmc.com;swapnil_khobragade_tp@bmc.com;ankush_agrawal_tp@bmc.com;pravin_tidke_tp@bmc.com;kiran_gaikwad_tp@bmc.com;naziya_mujawar@bmc.com;gaurav_mirani@bmc.com;rahul_dhiman_tp@bmc.com;rajan_bangar_tp@bmc.com;apurva_deshmukh_tp@bmc.com",
        to: "tushar_garud@bmc.com",
        from: "jenkins@noreply",
        attachmentsPattern: 'e2e/reports/spec-jira-report/jira-report.csv'
      )
    }
  } catch (Exception e) {
    echo "Send Email Failed" + e;
  }
}
