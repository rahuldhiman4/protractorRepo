def suiteNameList = [];
properties([
    parameters([
        stringParam(
          defaultValue: 'PrivateSlave',
          description: 'Node name to run the job',
          name: 'NODE',
        ),
        text(
            defaultValue: 'case1,cognitive=http://clm-aus-t5jiqs.bmc.com:8008\ncase2=http://clm-aus-t5pip8.bmc.com:8008\ntask,social,attachment=http://clm-aus-t5jj9s.bmc.com:8008\nknowledge,email=http://clm-aus-t5jipb.bmc.com:8008\nslm,flowset,notification=http://clm-aus-t5jhb8.bmc.com:8008\nticketing=http://clm-aus-t5jher.bmc.com:8008',
            description: 'Execution Suite List',
            name: 'SUITELIST',
        ),
        stringParam(
            defaultValue: 'Regression:UI:Auto:Upgrade',
            description: 'Jira test cycle',
            name: 'CYCLENAME',
        ),
        stringParam(
            defaultValue: 'UI_Auto:Upgrade_Protractor',
            description: 'Jira test cycle folder',
            name: 'FOLDERNAME',
        ),
        booleanParam(
            defaultValue: false,
            description: 'Pass Percent',
            name: 'STATS'
        )
    ])
])
node("${NODE}"){
    stage('Clone & Build'){
        bat """if exist "./artefact" RMDIR /S /Q "./artefact" """
        bat "IF EXIST e2e\\reports RMDIR /S /Q e2e\\reports"
        git branch: 'master',
	    credentialsId: '807c8e4d-6d6c-47e1-a62e-ef2de91d6dce',
	    url: 'https://github.bmc.com/DSM-Apps/bwf-e2e-protractor.git'
		bat "npm install"
		bat "npm run webdriver-update"		
    }

    try{
        stage('Parallel Child'){
            def builds = [:];
            def br = [:];
            def i = 0;
            SUITELIST.split('\n').each{
                def suiteAndEnv = "${it}".split('=');
                suiteNameList[i] = suiteAndEnv[0];
                i++;
                builds["${it}"] = {
                    br["{it}"] = build job: 'ProtractorChild', parameters: [
                        [$class: 'StringParameterValue', name: 'NODE', value: "${NODE}"],
                        [$class: 'StringParameterValue', name: 'SUITE', value: "${it}"],
                        [$class: 'StringParameterValue', name: 'PARENTDIR', value: "${WORKSPACE}"],
                    ]
                }
            }
            parallel (builds)
        }
    } catch (Exception e) {
        echo """Child Job Failure""" + e;
    }

    try{
        stage('Jira Cycle'){
            def now = new Date();
            def dateNow = now.format("yyyy-MM-dd HH:mm", TimeZone.getTimeZone('UTC'));
            bat """if not exist "./e2e/reports/spec-jira-report" mkdir "./e2e/reports/spec-jira-report" """
            suiteNameList.each{
                def suiteName = "${it}";
                // Create Jira Cycle
                bat """npm run jira-cycle -- --cycle=%CYCLENAME% --inputfile="${WORKSPACE}/artefact/${suiteName}_spec-json-report.json" --folder="%FOLDERNAME% ${dateNow}" --stats=%STATS%"""
                //copy jira report file artefact folder
                bat """xcopy /Y /F /I /Z /Q "e2e/reports/spec-jira-report/jira-report.csv" "artefact/jira-report/${suiteName}_jira-report.csv*" """
            }
            // merge all Jira output csv files
            def fileContent = readFile("artefact/jira-report/${suiteNameList[0]}_jira-report.csv");
            for (int j=1; j < suiteNameList.size(); j++){
                def fileLines = readFile("artefact/jira-report/${suiteNameList[j]}_jira-report.csv").readLines();
                fileContent = fileContent + "\n" + fileLines.tail().join('\n');
            }
            writeFile(file: "artefact/jira-report/jira-report.csv", text: fileContent);
            //create zip of jira-report folder
            zip archive: false, dir: 'artefact/jira-report', zipFile: 'artefact/jira-report.zip'
        }
    } catch (Exception e) {
        echo """Jira Cycle Failure""" + e;
    }

    try{
        stage('Send Email'){
            def suiteDetails = "${SUITELIST}".split('\n').join("<br>");
            emailext (
                subject: "BWF UI - Protractor Automation Parallel Run Report Build # ${env.BUILD_NUMBER}",
                body:
                """
                <style type="text/css">
                body {
                    margin: 0px;
                    padding: 15px;
                    font-family: "Lucida Sans Unicode";
                    font-size: 10pt;
                }
                h3 {
                    background: #F2B66B;
                    padding: 10px;
                    border: 1px solid #333;
                }
                table {
                    width: 70%;
                }
                td.bold {
                    width: 30%;
                    font-weight:bold;
                }
                table, tr, td {
                    border: 1px solid black;
                    border-collapse: collapse;
                    padding: 5px;
                }
                </style>
                <h3>BWF UI - Protractor Automation Parallel Run Report</h3>
                <table>
                <tr><td class=bold>Environment Name: </td><td>${suiteDetails}</td></tr>
                <tr><td class=bold>Build URL:</td><td><a href="${env.BUILD_URL}">View Jenkins</a></td></tr>
                <tr><td class=bold>Build Artefact:</td><td><a href="ftp://vl-pun-rem-qa4n/punebuild/automation-results/protractor-result/UIAutoParallel_Build${env.BUILD_NUMBER}">FTP Link</a></td></tr>
                """
                +
                '${FILE, path="e2e/reports/spec-jira-report/CycleReport.html"}'
                +
                "</table>",
                to: "prasad_vidhate@bmc.com;sunil_patil@bmc.com;pravin_ajagunde@bmc.com;tushar_garud@bmc.com;anant_sahitya@bmc.com;swapnil_khobragade_tp@bmc.com;ankush_agrawal_tp@bmc.com;pravin_tidke_tp@bmc.com;kiran_gaikwad_tp@bmc.com;naziya_mujawar@bmc.com;rahul_dhiman_tp@bmc.com;rajan_bangar_tp@bmc.com;apurva_deshmukh_tp@bmc.com;ashish_gabhane@bmc.com;swapnil_yelkar@bmc.com;sushrut_sawarkar@bmc.com",
                from: "jenkins@noreply",
                attachmentsPattern: 'artefact/jira-report/jira-report.csv'
            )
        }
    } catch (Exception e) {
        echo """Email Failure""" + e;
    }

    try{
        stage('Upload Over FTP'){
            ftpPublisher alwaysPublishFromMaster: true, continueOnError: true, failOnError: false, publishers: [
                [configName: 'vl-pun-rem-qa4n-protractor', transfers: [
                    [asciiMode: false, cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "UIAutoParallel_Build${env.BUILD_NUMBER}", remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'artefact/*.zip']
                ], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]
            ]
        }
    } catch (Exception e) {
        echo """FTP Failure""" + e;
    }
}