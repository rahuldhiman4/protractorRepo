def NODE = 'AutoUI'
def user = 'dsm-bot'

@Library('dsm-apps-shared-libraries@20.08.00') _
properties([
	parameters(
		appParams.getCommonParameters(
			paramConstant.PARAM_APP_IMAGE_TAG | paramConstant.PARAM_CLUSTER, ['CLUSTER' : [''], 'APP_IMAGE_TAG' : '',]
		)
	)
])

node("node2"){
    stage('Checkout') { git branch: 'master', credentialsId: user, url: 'https://github.bmc.com/DSM-Apps/bwf-qa-deployment' }

	stage('Build BWF Deployment Docker') {
		echo "Cluster: ${CLUSTER}"
		echo "APP_IMAGE_TAG: ${APP_IMAGE_TAG}"
		echo "CLUSTER: ${CLUSTER}"
		def vmlist = CLUSTER.split();
		def play = [:]
		for (int i=0; i < vmlist.size(); i++){
			def vm = vmlist[i]
			play["${vm}"]={
				sh "./create-inventory.sh ${vm}"
				sh "ansible-playbook -i ${vm} bwfondemand.yml -e APP_IMAGE_TAG=${APP_IMAGE_TAG} -e reboot=true"
			}
		}
		parallel play
        sleep(180)
	}
}

node("${NODE}"){
    def suiteNameList = [];
    stage('Clone & Build'){
        bat """if exist "./artefact" RMDIR /S /Q "./artefact" """
        bat "IF EXIST e2e\\reports RMDIR /S /Q e2e\\reports"

        git branch: 'master',
            credentialsId: user,
            url: 'https://github.bmc.com/DSM-Apps/bwf-e2e-protractor.git'
        bat "npm install"
		bat "npm run webdriver-update"
    }

    try{
        stage('Test Execution'){
            def builds = [:];
            def br = [:];
            def i = 0;
            SUITELIST.split('\n').each{
                def suiteAndEnv = "${it}".split('=');
                suiteNameList[i] = suiteAndEnv[0];
                i++;
                builds["${it}"] = {
                    br["{it}"] = build job: 'bwf-ui-e2e-child', parameters: [
                        [$class: 'StringParameterValue', name: 'NODE', value: "${NODE}"],
                        [$class: 'StringParameterValue', name: 'SUITE', value: "${it}"],
                        [$class: 'StringParameterValue', name: 'PARENTDIR', value: "${WORKSPACE}"],
                    ]
                }
            }
            parallel (builds)
        }
    } catch (Exception e) {
        echo "Test Execution Failed ==> " + e;
    }

    try{
        stage('Jira Cycle'){
            def now = new Date();
            def dateNow = now.format("yyyy-MM-dd HH:mm", TimeZone.getTimeZone('UTC'));
            bat """if not exist "./e2e/reports/spec-jira-report" mkdir "./e2e/reports/spec-jira-report" """
            suiteNameList.each{
                def suiteName = "${it}";
                // Create Jira Cycle
                bat """npm run jira-cycle -- --cycle=%CYCLENAME% --inputfile="${WORKSPACE}/artefact/${suiteName}_spec-json-report.json" --folder="%FOLDERNAME% ${dateNow}" --stats=%STATS%"""
                //copy jira report files to artefact folder
                bat """xcopy /Y /F /I /Z /Q "e2e/reports/spec-jira-report/jira-report.csv" "artefact/jira-report/${suiteName}_jira-report.csv*" """
                bat """xcopy /Y /F /I /Z /Q "e2e/reports/spec-jira-report/summary-report.json" "artefact/jira-report/${suiteName}_summary-report.json*" """
            }
            // merge all Jira output csv files
            def fileContent = readFile("artefact/jira-report/${suiteNameList[0]}_jira-report.csv");
            for (int j=1; j < suiteNameList.size(); j++){
                def fileLines = readFile("artefact/jira-report/${suiteNameList[j]}_jira-report.csv").readLines();
                fileContent = fileContent + "\n" + fileLines.tail().join('\n');
            }
            writeFile(file: "artefact/jira-report/jira-report.csv", text: fileContent);

            // merge all summary-report output files
            def finalMap = [:];
            for (int k=0; k < suiteNameList.size(); k++){
                def componentObj = readJSON file: "artefact/jira-report/${suiteNameList[k]}_summary-report.json";
                def components = componentObj.keySet();
                components.each {
                    def passAll = (componentObj.get(it).get("passed"));
                    def failAll = (componentObj.get(it).get("failed"));
                    def skipAll = (componentObj.get(it).get("skipped"));
                    def totalAll = passAll + failAll + skipAll;
                    if(finalMap.containsKey(it) == true && it != "Total") {
                        passAll += finalMap.get(it).get('pass');
                        failAll += finalMap.get(it).get('fail');
                        skipAll += finalMap.get(it).get('skip');
                        totalAll += finalMap.get(it).get('total');
                    }
                    finalMap.put(it, [pass: passAll, fail: failAll, skip: skipAll, total: totalAll]);
                }
            }
            writeJSON file: "artefact/jira-report/summary-report.json", json: finalMap, pretty: 1;

            //create zip of jira-report folder
            zip archive: false, dir: 'artefact/jira-report', zipFile: 'artefact/jira-report.zip'
        }
    } catch (Exception e) {
        echo "Jira Cycle Failed ==> " + e;
    }

    try{
        stage('Reporting'){
            def suiteDetails = "${SUITELIST}".split('\n').join("<br>");
            emailext (
                subject: "BWF UI - Protractor Automation Parallel Run Report Build # ${env.BUILD_NUMBER}",
                body:
                """
                <style type="text/css">
                body {
                    margin: 0px;
                    padding: 15px;
                    font-family: "Lucida Sans Unicode";
                    font-size: 10pt;
                }
                h3 {
                    background: #F2B66B;
                    padding: 10px;
                    border: 1px solid #333;
                }
                table {
                    width: 70%;
                }
                td.bold {
                    width: 30%;
                    font-weight:bold;
                }
                table, tr, td {
                    border: 1px solid black;
                    border-collapse: collapse;
                    padding: 5px;
                }
                </style>
                <h3>BWF UI - Protractor Automation Parallel Run Report</h3>
                <table>
                <tr><td class=bold>Environment Name: </td><td>${suiteDetails}</td></tr>
                <tr><td class=bold>Build URL:</td><td><a href="${env.BUILD_URL}">View Jenkins</a></td></tr>
                <tr><td class=bold>Build Dashboard:</td><td><a href="http://vl-aus-rem-bl08.bmc.com:8080/view/Helix%20BWF/">Component Dashboard</a></td></tr>
                <tr><td class=bold>Build Artefact:</td><td><a href="ftp://vl-pun-rem-qa4n/punebuild/automation-results/protractor-result/UIAutoParallel_Build${env.BUILD_NUMBER}">FTP Link</a></td></tr>
                """
                +
                '${FILE, path="e2e/reports/spec-jira-report/CycleReport.html"}'
                +
                "</table>",
                to: "prasad_vidhate@bmc.com;sunil_patil@bmc.com;pravin_ajagunde@bmc.com;tushar_garud@bmc.com;anant_sahitya@bmc.com;swapnil_khobragade_tp@bmc.com;ankush_agrawal_tp@bmc.com;kiran_gaikwad_tp@bmc.com;naziya_mujawar@bmc.com;rahul_dhiman_tp@bmc.com;apurva_deshmukh_tp@bmc.com;nikhil_bokade_tp@bmc.com;ashish_gabhane@bmc.com;swapnil_yelkar@bmc.com;sushrut_sawarkar@bmc.com;shalakha_hemrajani_tp@bmc.com",
                attachmentsPattern: 'artefact/jira-report/jira-report.csv'
            )

            ftpPublisher alwaysPublishFromMaster: true, continueOnError: true, failOnError: false, publishers: [
                [configName: 'vl-pun-rem-qa4n-protractor', transfers: [
                    [asciiMode: false, cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "UIAutoParallel_Build${env.BUILD_NUMBER}", remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'artefact/*.zip']
                ], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]
            ]
            
            def total = 0
            def failed = 0
            def passed = 0
            def skipped = 0
            def percent = 0

            def logContent = Jenkins.getInstance().getItemByFullName(env.JOB_NAME).getBuildByNumber(Integer.parseInt(env.BUILD_NUMBER)).logFile.text

            def matcher = logContent =~ /^(?ms).*Test Cycle Pass % ==> (\d*).*$/
            if (matcher.matches()) percent = matcher.group(1).toInteger()
            matcher = logContent =~ /^(?ms).*Passed tests ==> (\d*).*$/
            if (matcher.matches()) passed = matcher.group(1).toInteger()
            matcher = logContent =~ /^(?ms).*Failed tests ==> (\d*).*$/
            if (matcher.matches()) failed = matcher.group(1).toInteger()
            matcher = logContent =~ /^(?ms).*Skipped tests ==> (\d*).*$/
            if (matcher.matches()) skipped = matcher.group(1).toInteger()
            matcher = logContent =~ /^(?ms).*Total Executed tests ==> (\d*).*$/
            if (matcher.matches()) total = matcher.group(1).toInteger()

            currentBuild.description = "Tests:" + total + " Passed:" + passed + " Failed:" + failed + " Skipped:" + skipped
            if (percent < 90) currentBuild.result = 'FAILURE';

            // PMO Dashboard per component
            if("${PMO}" == "true") {
            build job: 'bwf-pmo-dashboard', 
                parameters: [
		            string(name: 'NODE', value: "${NODE}"),
                    string(name: 'JSON', value: "${WORKSPACE}/artefact/jira-report/summary-report.json"),
                    string(name: 'EXTN', value: "UI")
                ]
            }
        }
    } catch (Exception e) {
        echo "Reporting Failed ==> " + e;
    }
}