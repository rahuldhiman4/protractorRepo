import groovy.json.JsonSlurperClassic;

def user = 'dsm-bot'

node("${NODE}"){
    def suiteNameList = [];
    stage('Clone & Build'){
        bat """if exist "./artefact" RMDIR /S /Q "./artefact" """
        bat "IF EXIST e2e\\reports RMDIR /S /Q e2e\\reports"

        git branch: 'master',
            credentialsId: user,
            url: 'https://github.bmc.com/DSM-Apps/bwf-e2e-protractor.git'
        bat "npm install"
		bat "npm run webdriver-update"
    }

    stage('Test Execution') {
        try {
            def builds = [:];
            def br = [:];
            def i = 0;
            SUITELIST.split('\n').each {
                def suiteAndEnv = "${it}".split('=');
                suiteNameList[i] = suiteAndEnv[0];
                i++;
                builds["${it}"] = {
                    br["{it}"] = build job: 'bwf-ui-e2e-child', parameters: [
                        [$class: 'StringParameterValue', name: 'NODE', value: "${NODE}"],
                        [$class: 'StringParameterValue', name: 'SUITE', value: "${it}"],
                        [$class: 'StringParameterValue', name: 'PARENTDIR', value: "${WORKSPACE}"],
                    ]
                }
            }
            parallel (builds);
        } catch (Exception e) {
            echo "Test Execution Failed ==> " + e;
        }
    }

    stage('Reporting') {
        def percent = 0;
        def total = 0;
        def failed = 0;
        def passed = 0;
        def skipped = 0;

        try {
            bat """if not exist "./e2e/reports/spec-test-report" mkdir "./e2e/reports/spec-test-report" """
            suiteNameList.each {
                def suiteName = "${it}";
                // run test report
                bat """npm run test-report -- --inputfile="${WORKSPACE}/artefact/${suiteName}_spec-json-report.json""""
                // copy test report files to artefact folder
                bat """xcopy /Y /F /I /Z /Q "e2e/reports/spec-test-report/test-report.csv" "artefact/test-report/${suiteName}_test-report.csv*" """
                bat """xcopy /Y /F /I /Z /Q "e2e/reports/spec-test-report/summary-report.json" "artefact/test-report/${suiteName}_summary-report.json*" """
            }
            // merge all test-report csv files
            def fileContent = readFile("artefact/test-report/${suiteNameList[0]}_test-report.csv");
            for (int j=1; j < suiteNameList.size(); j++) {
                def fileLines = readFile("artefact/test-report/${suiteNameList[j]}_test-report.csv").readLines();
                fileContent = fileContent + "\n" + fileLines.tail().join('\n');
            }
            writeFile(file: "artefact/test-report/test-report.csv", text: fileContent);

            // merge all summary-report output files
            def finalMap = [:];
            for (int k=0; k < suiteNameList.size(); k++) {
                def componentObj = readJSON file: "artefact/test-report/${suiteNameList[k]}_summary-report.json";
                def components = componentObj.keySet();
                components.each {
                    def passAll = (componentObj.get(it).get("passed"));
                    def failAll = (componentObj.get(it).get("failed"));
                    def skipAll = (componentObj.get(it).get("skipped"));
                    def totalAll = (componentObj.get(it).get("total"));
                    if(finalMap.containsKey(it) == true && it != "Total") {
                        passAll += finalMap.get(it).get('passed');
                        failAll += finalMap.get(it).get('failed');
                        skipAll += finalMap.get(it).get('skipped');
                        totalAll += finalMap.get(it).get('total');
                    }
                    finalMap.put(it, [pass: passAll, fail: failAll, skip: skipAll, total: totalAll]);
                }
            }
            writeJSON file: "artefact/test-report/summary-report.json", json: finalMap, pretty: 1;

            // create zip of test-report folder
            zip archive: false, dir: 'artefact/test-report', zipFile: 'artefact/test-report.zip'

            // PMO-Dashboard
            def jsonReport = "${WORKSPACE}/artefact/test-report/summary-report.json";
            def jsonFileContent = readFile(file: jsonReport);
            def componentObj = new JsonSlurperClassic().parseText(jsonFileContent);
            def components = componentObj.keySet();
            //----------------
            components.each {
            //----------------
                if(it == "Total") {
                    passed = (componentObj.get(it).get("pass"));
                    failed = (componentObj.get(it).get("fail"));
                    skipped = (componentObj.get(it).get("skip"));
                    total = (componentObj.get(it).get("total"));
                    percent = ((passed * 100) / total).toInteger();
                }
            }
            currentBuild.description = "Tests:" + total + " Passed:" + passed + " Failed:" + failed + " Skipped:" + skipped;
            if (percent < 95) currentBuild.result = 'FAILURE';

            // PMO Dashboard per component
            if("${PMO}" == "true") {
            build job: 'bwf-pmo-dashboard', 
                parameters: [
		            string(name: 'NODE', value: "${NODE}"),
                    string(name: 'JSON', value: "${WORKSPACE}/artefact/test-report/summary-report.json"),
                    string(name: 'EXTN', value: "UI")
                ]
            }

        } catch (Exception e) {
            echo "Reporting Failed ==> " + e;
        }

        try {
            def suiteDetails = "${SUITELIST}".split('\n').join("<br>");
            emailext (
                subject: "${SUBJECT} Build # ${env.BUILD_NUMBER}",
                body:
                """
                <style type="text/css">
                    body {
                        margin: 0px;
                        padding: 15px;
                        font-family: "Lucida Sans Unicode";
                        font-size: 10pt;
                    }
                    h3 {
                        background: #F2B66B;
                        padding: 10px;
                        border: 1px solid #333;
                    }
                    table {
                        width: 70%;
                    }
                    td.bold {
                        width: 30%;
                        font-weight:bold;
                    }
                    table, tr, td {
                        border: 1px solid black;
                        border-collapse: collapse;
                        padding: 5px;
                    }
                </style>
                <h3>BWF UI - Automation Run Report</h3>
                <table>
                    <tr><td class=bold>Environment Name: </td><td>${suiteDetails}</td></tr>
                    <tr><td class=bold>Build URL:</td><td><a href="${env.BUILD_URL}">View Jenkins</a></td></tr>
                    <tr><td class=bold>DSOM Dashboard:</td><td><a href="http://vl-aus-rem-bl08.bmc.com:8080/view/Helix%20BWF/">Dashboard</a></td></tr>
                    <tr><td class=bold>Build Artefact:</td><td><a href="ftp://vl-pun-rem-qa4n/punebuild/automation-results/protractor-result/UIAuto_Build${env.BUILD_NUMBER}">FTP Link</a></td></tr>
                    """
                    +
                    '${FILE, path="e2e/reports/spec-test-report/TestReport.html"}'
                    +
                "</table>",
                to: EMAILID,
                attachmentsPattern: 'artefact/test-report/test-report.csv'
            )

            ftpPublisher alwaysPublishFromMaster: true, continueOnError: true, failOnError: false, publishers: [
                [configName: 'vl-pun-rem-qa4n-protractor', transfers: [
                    [asciiMode: false, cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: "UIAuto_Build${env.BUILD_NUMBER}", remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'artefact/*.zip']
                ], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]
            ]
        } catch (Exception e) {
            echo "Reporting Failed ==> " + e;
        }
    }
}